@attribute [Authorize]
@page "/folder/{FolderId}/settings"

@using Microsoft.AspNetCore.Authorization
@using glubfish.Shared.RequestModels
@using glubfish.Shared.ResponseModels

@inject glubfish.Client.Services.API API
@inject NavigationManager _navigationManager
@inject glubfish.Client.Services.AppState _appState
@inject IToastService _toastService 
@inject IModalService _modalService

@if (Folder != null)
{
    <h3 class="mb-2 text-muted mt-3">Folder Name</h3>
    <div class="col-md-6">
        <div class="row">
            <div class="input-group input-group-lg">
                <input type="text" class="form-control" @bind="Folder.Name" placeholder="Folder Name" aria-label="Folder Name" aria-describedby="button-addon2" />
                <div class="input-group-append">
                    <button class="btn btn-outline-dark" type="button" id="button-addon2" @onclick="UpdateFolderName">Change Folder Name</button>
                </div>
            </div>
        </div>
    </div>

    <h3 class="mb-2 text-muted mt-5">Manage Authorized Users/Owners</h3>
    <p>
        Add or remove users who should have access to this Folder data. Add the email address of the user - be sure to spell it correctly.
    </p>
    <div class="col-md-6">
        <div class="row">
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="NewAuthorizedUserEmail" placeholder="User's Email Address" aria-label="User's Email Address" aria-describedby="button-addon2" />
                <div class="input-group-append">
                    <button class="btn btn-success" type="button" id="button-addon2" @onclick="AddAuthorizedUser">Add User</button>
                </div>
            </div>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Email Address</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Folder.AuthorizedUsers)
                {
                    <tr>
                        <th scope="row">@user.ApplicationUserEmail</th>
                        <td>
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id="@($"authorized_{@user.ApplicationUserEmail}")" checked="@(user.IsFolderAdmin ? "checked" : null )" @onchange="(() => ToggleAuthorizedRole(user))" />
                                <label class="custom-control-label" for="@($"authorized_{@user.ApplicationUserEmail}")">Administrator</label>
                            </div>
                        </td>
                        <td>
                            <div class="btn btn-danger" @onclick="(() => RemoveAuthorizedUser(user))"><i class="fas fa-trash-alt"></i></div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h3 class="mb-2 text-muted mt-5">Delete Folder</h3>
    <p>
        Click the button below to delete your folder. This will delete all folder data, customers, owners and authorized users. This action cannot be undone! Your account will remain active, but your folder will be deleted.
    </p>
    <div class="mt-1">
        <input type="button" class="btn btn-danger" value="Delete Folder" @onclick="DeleteFolder" />
    </div>
}

@code {

    [Parameter]
    public string FolderId { get; set; }

    public ResponseFolder Folder { get; set; }

    public string NewAuthorizedUserEmail { get; set; }

    async protected override Task OnInitializedAsync()
    {
        Folder = await API.FolderGetById(FolderId);
    }

    public async Task AddAuthorizedUser()
    {
        FolderAddAuthorizedEmailModel model = new FolderAddAuthorizedEmailModel()
        {
            Email = NewAuthorizedUserEmail
        };
        await API.UpdateFolderSetUserAuthorized(Folder.Id, model);

        Folder = await API.FolderGetById(FolderId);
    }

    public async Task RemoveAuthorizedUser(ResponseFolderAuthorizedUser user)
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.UpdateFolderRemoveUserAuthorized(FolderId, user.ApplicationUserId);
            Folder = await API.FolderGetById(FolderId);
        }
    }

    public async Task ToggleAuthorizedRole(ResponseFolderAuthorizedUser user)
    {
        FolderToggleAuthorizedModel model = new FolderToggleAuthorizedModel()
        {
            Administrator = user.IsFolderAdmin ? false : true
        };
        await API.UpdateFolderToggleUserAdministrator(Folder.Id, user.ApplicationUserId, model);
    }

    public async Task DeleteFolder()
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {

            await API.DeleteFolder(FolderId);
            _appState.CurrentFolderId = null;
            _appState.CurrentFolderName = null;

            await _appState.UpdateAppState();
            _toastService.ShowSuccess($"Folder \"{Folder.Name}\" Deleted. Redirecting...");

            await Task.Delay(1000);
            _navigationManager.NavigateTo("/");
        }
    }

    public async Task UpdateFolderName()
    {
        FolderCreateEditRequestModel model = new FolderCreateEditRequestModel()
        {
            Name = Folder.Name
        };

        await API.FolderEditName(Folder.Id, model);

        _toastService.ShowSuccess("Folder Updated");

        await _appState.UpdateAppState();
    }
}

