@attribute [Authorize]
@page "/folder/{FolderId}/type/{DataTypeId}/search"

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager _navigationManger

@using Microsoft.AspNetCore.Authorization
@using glubfish.Shared.RequestModels
@using glubfish.Shared.ResponseModels
@using glubfish.Shared.Enumerations

@inject glubfish.Client.Services.API API

@if (Folder != null)
{
    <div class="row">
        <div class="col-md-6">
            <h3>@Types.FirstOrDefault(t => t.Id == DataTypeId)?.Name</h3>
        </div>
        <div class="col-md-6">
            @if (DataTypeId != null)
            {
                <NavLink class="btn btn-success btn-lg pointer float-right mb-2" href="@($"folder/{Folder.Id}/type/{DataTypeId}")">
                    <i class="fas fa-plus mx-2"></i> Create New
                </NavLink>
            }
        </div>
    </div>

    @if (DataTypeId != null)
    {
        <div class="row mt-2">
            <div class="col-md-12">
                <form @onsubmit="(() => SearchType(0, false))" class="input-group float-right">
                    <input type="text" class="form-control" aria-label="Text input with dropdown button" @bind="Search.FilterText" />
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="submit"><i class="fas fa-search mr-2"></i>Search</button>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="btn btn-link float-right pointer" @onclick="(() => SearchType(null, true))">Reset Search</div>
            </div>
        </div>
    }

    <div class="row mt-2">
        <div class="col-md-12">
            <span class="float-right">@(string.IsNullOrEmpty(Search.FilterText) == false ? $"Searching \"{Search.FilterText}\"." : string.Empty) @(TotalFound != null ? $" Found {TotalFound} items" : string.Empty)</span>
        </div>
    </div>
    @if (Instances.Count > 0)
    {
        <div class="table-responsive">
            <small class="tiny-text mt-3">Sorting by most recent first</small>
            <table class="table table-hover">
                <thead class="thead-dark">
                    <tr>
                        @foreach (var column in Types.FirstOrDefault(t => t.Id == DataTypeId)?.Fields.Where(f => f.SearchShow == true).OrderBy(f => f.SearchOrder))
                        {
                            <th scope="col">
                                <span class="mr-2">@column.Name</span>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var instance in Instances)
                    {
                    <tr class="pointer" @onclick="(() => SelectInstance(instance.Id))">
                        @foreach (var column in Types.FirstOrDefault(t => t.Id == DataTypeId)?.Fields.Where(f => f.SearchShow == true).OrderBy(f => f.SearchOrder))
                        {
                            @if (instance.Data.Where(i => i.Key == column.Id).Count() > 0)
                            {
                                if (column.Type == FieldType.Date)
                                {
                                    <td>@DateTime.Parse(instance.Data.Where(i => i.Key == column.Id).FirstOrDefault().Value).ToString("D")</td>
                                }
                                else
                                {
                                    <td>@instance.Data.Where(i => i.Key == column.Id).FirstOrDefault().Value</td>
                                }
                            }
                            else
                            {
                                <td></td>
                            }
                        }
                    </tr>
                    }
                </tbody>
            </table>
            <nav aria-label="Page navigation example">
                <ul class="pagination float-right">
                    @if (TotalFound != null)
                    {
                        @if ((Search.Page + 1) > 1)
                        {
                            <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchType(Search.Page - 1, false))">Previous</div></li>
                        }
                        <li class="page-item"><div class="page-link">Page @(Search.Page + 1) of @(Math.Ceiling((double)TotalFound / PageSize))</div></li>
                        @if ((Search.Page + 1) < (Math.Ceiling((double)TotalFound / PageSize)))
                        {
                            <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchType(Search.Page + 1, false))">Next</div></li>
                        }
                    }
                </ul>
            </nav>
        </div>
    }
}

@code {

    [Parameter]
    public string FolderId { get; set; }

    [Parameter]
    public string DataTypeId { get; set; }

    int PageSize { get; set; } = 25;

    //Loaded from API
    ResponseFolder Folder { get; set; }
    List<ResponseDataType> Types { get; set; } = new List<ResponseDataType>();
    List<ResponseInstance> Instances = new List<ResponseInstance>();
    int? TotalFound { get; set; }

    private Search Search { get; set; } = new Search();

    private const string InstanceIdLabel = "InstanceId";

    protected override async Task OnParametersSetAsync()
    {
        await LoadFolderData();
    }

    private async Task LoadFolderData()
    {
        Folder = await API.FolderGetById(FolderId);
        await GetDataTypes();
    }

    async private Task GetDataTypes()
    {
        if (FolderId != null)
        {
            Types = await API.GetFolderTypeAsList(FolderId);

            string cachedDataTypeId = await localStorage.GetItemAsync<string>("DataTypeId");
            if (Types.Any(t => t.Id == cachedDataTypeId))
            {
                if (DataTypeId != null)
                {
                    if (DataTypeId == cachedDataTypeId)
                    {
                        Search = await localStorage.GetItemAsync<Search>("Search");
                    }
                    await SearchType(null, false);
                }
            }
            else
            {
                await SearchType(null, true);
            }
        }
    }

    async private Task TypeClick(ChangeEventArgs e)
    {
        DataTypeId = e.Value.ToString();
        await SearchType(null, true);
    }


    /// <summary>
    /// null parameters means the existing search parameter will not be overwritten.
    /// </summary>
    /// <param name="page"></param>
    /// <param name="sortBy"></param>
    /// <param name="sortDirection"></param>
    /// <param name="reset"></param>
    /// <returns></returns>
    async private Task SearchType(int? page, bool reset)
    {
        if (reset == true)
        {
            Search = new Search();
            page = null;
        }

        Search = new Search()
        {
            FilterText = string.IsNullOrEmpty(Search?.FilterText) ? null : Search?.FilterText,
            Page = page == null ? Search.Page : (int)page,
            PageSize = PageSize
        };

        await localStorage.SetItemAsync("Search", Search);
        await localStorage.SetItemAsync("DataTypeId", DataTypeId);

        var response = await API.SearchFolderInstance(FolderId, DataTypeId, Search);
        Instances = response.Data;
        TotalFound = response.Total;
    }

    private void SelectInstance(string instanceId)
    {
        _navigationManger.NavigateTo($"folder/{FolderId}/type/{DataTypeId}/instance/{instanceId}");
    }
}
