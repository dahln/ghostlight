@page "/"
@page "/folder/{FolderId}"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization

@inject depot.Client.Services.AppState _appState
@inject IToastService _toastService

<AuthorizeView>
    <Authorized>
        @if (_appState.Ready == true && _appState.CurrentFolderName != null)
        {
            <div class="row mt-5 pt-5">
                <h4 class="mx-auto"><i class="far fa-folder-open mr-1"></i>@_appState.CurrentFolderName</h4>
            </div>
            @if (_appState.DataTypes.Count == 0)
            {
                <div class="row mt-5">
                    <h6 class="mx-auto">Visit the 'Form Designer' to create &amp; manage forms</h6>
                </div>
            }
            <div class="row mt-5">
                <div class="col-md-4 offset-md-4">
                    <div class="list-group w-100">
                        @foreach (var type in _appState.DataTypes)
                        {
                            <NavLink class="list-group-item list-group-item-action" href="@($"folder/{_appState.CurrentFolderId}/type/{type.Data}/search")">
                                <i class="fas fa-search mr-1"></i> @type.Text
                            </NavLink>
                        }
                        @if (_appState.DataTypes.Count == 0 && _appState.CurrentFolderIsAdministrator)
                        {
                            <NavLink class="btn btn-outline-dark btn-lg mx-auto w-100" href="@($"folder/{_appState.CurrentFolderId}/design")">
                                Go to Form Designer <i class="fas fa-arrow-right float-right ml-1 mt-1"></i>
                            </NavLink>
                        }
                    </div>
                </div>
            </div>

        }
        else if (_appState.Ready == true)
        {

            @if (_appState.AllowedFolders.Count == 0)
            {
                <div class="row mt-5 pt-5">
                    <div class="col-md-4 offset-md-4">
                        <NavLink class="btn btn-outline-dark btn-lg mx-auto w-100" href="@($"folder")">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Nothing here, create a 'folder' to get started <i class="fas fa-arrow-right float-right mt-1"></i>
                        </NavLink>
                    </div>
                </div>
            }
            else
            {
                <div class="row mt-5 pt-5">
                    <h4 class="mx-auto">Create a new Folder</h4>
                </div>
            }
            @if (_appState.AllowedFolders.Count > 0)
            {
                <div class="row mt-5 pt-5">
                    <h4 class="mx-auto">or</h4>
                </div>
                <div class="row mt-5 pt-5">
                    <h4 class="mx-auto">Select an existing Folder</h4>
                </div>
            }
        }
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="mx-auto">
                <a class="btn btn-lg btn-outline-success btn-home mt-5" href="authentication/login">Log in</a>
            </div>
        </div>
        <div class="row">
            <div class="mx-auto">
                <a class="btn btn-lg btn-outline-primary btn-home mt-5" href="authentication/register">Register</a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
<div class="row mt-5">
    <div class="col-md-4 offset-md-4">
        <p class="app-desc">
            depot is a free &amp; open source CRM/XRM. It enables a user to save/search/share data. This application is designed with small businesses or organizations in mind. Unlike many other CRM-type applications it does not complicate the application with workflows and triggers. It focuses on one thing - enabling you to organize and search for your data.
        </p>
        <a href="https://github.com/dahln/depot/blob/master/LICENSE" target="_blank">License &amp; Terms</a>
    </div>
</div>

@code {

    [Parameter]
    public string FolderId { get; set; }

    protected override void OnInitialized()
    {
        _appState.OnChange += StateHasChanged;

        base.OnInitialized();
    }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        var result = await _appState.UpdateAppState(FolderId);
        if (FolderId != null && result == true && _appState.CurrentFolderName != null)
        {
            _toastService.ShowInfo($"Switched to {_appState.CurrentFolderName}");
        }
    }
}

