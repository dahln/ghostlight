@page "/"
@page "/folder/{FolderId}"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization

@inject template.Client.Services.AppState _appState
@inject template.Client.Services.API API

<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="mx-auto">
                <input type="button" class="btn btn-primary mt-5" value="Seed DB" @onclick="SeedDB" />
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="mx-auto">
                <a class="btn btn-lg btn-outline-success btn-home mt-5" href="authentication/login">Log in</a>
            </div>
        </div>
        <div class="row">
            <div class="mx-auto">
                <a class="btn btn-lg btn-outline-primary btn-home mt-5" href="authentication/register">Register</a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
<div class="row mt-5">
    <div class="col-md-4 offset-md-4">
        <p class="app-desc">
            'template' is a Blazor App template. Microsoft provides several versions of templates for Blazor apps - they work great. My personal preference for a template is to have more functionality. This template provides simple pages and components that show CRUD ops, API calls, Authentication/Authorization with Identity. The Microsoft template shows how to do this, but I feel that the default Microsoft templates don't 'stub in' solutions that can be used to larger applications. My experiences with several frontend frameworks have lead to the creatinon this template.
        </p>
        <a href="https://github.com/dahln/template/blob/master/LICENSE" target="_blank">License &amp; Terms</a>
    </div>
</div>

@code {

    [Parameter]
    public string FolderId { get; set; }

    async protected override Task OnInitializedAsync()
    {
        _appState.OnChange += StateHasChanged;

        await _appState.UpdateAppState();
    }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        var result = await _appState.UpdateAppState(FolderId);
    }

    private async Task SeedDB()
    {
        await API.SeedDB(1000);
    }


}

