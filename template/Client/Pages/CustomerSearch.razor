@page "/customers"

@using template.Shared

@inject NavigationManager _navigationManger
@inject template.Client.Services.API API
@inject template.Client.Services.AppState _appState

<div class="row mt-3">
    <div class="col-md-12">
        <a href="customer" class="btn btn-success float-right"><i class="fas fa-plus mr-2"></i>Add Customer</a>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <form class="input-group float-right" @onsubmit="(() => SearchCustomers(0, false))">
            <input type="text" class="form-control" aria-label="Text input with dropdown button" @bind="Search.FilterText" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="submit"><i class="fas fa-search mr-2"></i>Search</button>
            </div>
        </form>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-12">
        <div class="btn btn-link float-right pointer" @onclick="(() => SearchCustomers(0, true))">Reset Search</div>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Phone</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Items)
                {
                    <tr class="pointer">
                        <td><div class="btn btn-link" @onclick="(() => SelectCustomer(item.Id))">@item.Name</div></td>
                        <td class="align-middle">@item.Email</td>
                        <td class="align-middle">@item.Phone</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <nav aria-label="Page navigation example">
            <ul class="pagination float-right">
                @if (TotalFound != null)
                {
                    @if ((Search.Page + 1) > 1)
                    {
                        <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchCustomers(Search.Page - 1, false))">Previous</div></li>
                    }
                    <li class="page-item"><div class="page-link">Page @(Search.Page + 1) of @(Math.Ceiling((double)TotalFound / PageSize))</div></li>
                    @if ((Search.Page + 1) < (Math.Ceiling((double)TotalFound / PageSize)))
                    {
                        <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchCustomers(Search.Page + 1, false))">Next</div></li>
                    }
                }
            </ul>
        </nav>
    </div>
</div>

@code {

    private Search Search { get; set; } = new Search();
    int PageSize { get; set; } = 25;

    List<CustomerSlim> Items = new List<CustomerSlim>();
    int? TotalFound { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await SearchCustomers(0, true);
    }

    async private Task SearchCustomers(int? page, bool reset)
    {
        if (reset == true)
        {
            Search = new Search();
            page = null;
        }

        Search = new Search()
        {
            FilterText = string.IsNullOrEmpty(Search?.FilterText) ? null : Search?.FilterText,
            Page = page == null ? Search.Page : (int)page,
            PageSize = PageSize
        };

        //await localStorage.SetItemAsync("Search", Search);
        //await localStorage.SetItemAsync("DataTypeId", DataTypeId);

        var response = await API.CustomerSearch(Search);
        Items = response.Data;
        TotalFound = response.Total;
    }

    private void SelectCustomer(string customerId)
    {
        _navigationManger.NavigateTo($"customer/{customerId}");
    }
}