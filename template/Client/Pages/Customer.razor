@page "/customer"
@page "/customer/{id}"

@inject NavigationManager _navigationManager
@inject template.Client.Services.API API

<div class="row">
    <div class="col-md-12">
        <h3>Customer @if (Locked == true)
        {<span class="btn btn-link" @onclick="ToggleEditing">Edit</span>}</h3>
    </div>
</div>

<fieldset disabled="@Locked">
    <div class="row">
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12">
                    <label>Name</label>
                    <input type="text" class="form-control" @bind="customer.Name" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label>Email</label>
                    <input type="text" class="form-control" @bind="customer.Email" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label>Phone</label>
                    <input type="text" class="form-control" @bind="customer.Phone" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label>Address</label>
                    <input type="text" class="form-control" @bind="customer.Address" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label>City</label>
                    <input type="text" class="form-control" @bind="customer.City" />
                </div>
                <div class="col-md-4">
                    <label>State</label>
                    <input type="text" class="form-control" @bind="customer.State" />
                </div>
                <div class="col-md-4">
                    <label>Postal</label>
                    <input type="text" class="form-control" @bind="customer.Postal" />
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12">
                    <label>Birth Date</label>
                    <input type="date" class="form-control" @bind="customer.BirthDate" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label>Notes</label>
                    <textarea class="form-control" rows="10" @bind="customer.Notes"></textarea>
                </div>
            </div>
        </div>
    </div>
</fieldset>

@if (Locked == false)
{
<div class="row mt-3">
    <div class="col-md-6">
        @if (!string.IsNullOrEmpty(Id))
        {
            <button class="btn btn-warning btn-customer" @onclick="Delete"><i class="far fa-trash-alt mr-1"></i>Delete</button>
        }
    </div>
    <div class="col-md-6">
        <button class="btn btn-primary btn-customer float-right" @onclick="Save"><i class="far fa-save mr-1"></i>Save</button>
        @if (!string.IsNullOrEmpty(Id))
        {
            <button class="btn btn-outline-dark btn-customer float-right mr-lg-2 mr-md-2" @onclick="CancelChanges"><i class="fas fa-times mr-1"></i>Cancel Changes</button>
        }
    </div>
</div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private template.Shared.Customer customer = new template.Shared.Customer();
    private bool Locked { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            Locked = true;
            customer = await API.CustomerGetById(Id);
        }
        else
        {
            Locked = false;
        }
    }

    private void ToggleEditing()
    {
        Locked = false;
    }

    async private Task Save()
    {
        if (string.IsNullOrEmpty(Id))
        {
            customer = await API.CustomerCreate(customer);
            _navigationManager.NavigateTo($"customer/{customer.Id}");
        }
        else if (!string.IsNullOrEmpty(Id))
        {
            customer = await API.CustomerUpdateById(customer, Id);
        }

        Locked = true;
    }

    async private Task Delete()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            await API.CustomerDeleteById(Id);
            _navigationManager.NavigateTo("customers");
        }
    }

    async private Task CancelChanges()
    {
        Locked = true;
        customer = await API.CustomerGetById(Id);
    }
}